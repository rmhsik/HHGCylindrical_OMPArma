#include <iostream>
#include <cmath>
#include <complex>
#include <armadillo>
#include <typeinfo>
#include "../include/physics.h"
#include "../include/fields.h"
#include "../include/math_aux.h"
#define ARMA_NO_DEBUG

int main(){
    double rmin = 0;
    double rmax = 100;
    int Nr = 1000;
    double dr = (rmax-rmin)/Nr;
    double zmin = -120;
    double zmax = 120;
    int Nz = 2400;
    double dz = (zmax-zmin)/Nz;
    int Nt = 200;
    double tlim = 10.0;
    double dt = 0.001;

    std::cout<<"Parameters:\n";
    std::cout<<"-------------\n";
    std::cout<<"rmin: "<<rmin<<std::endl;
    std::cout<<"rmax: "<<rmax<<std::endl;
    std::cout<<"Nr: "<<Nr<<std::endl;
    std::cout<<"dr: "<<dr<<std::endl;
    std::cout<<"zmin: "<<zmin<<std::endl;
    std::cout<<"zmax: "<<zmax<<std::endl;
    std::cout<<"Nz: "<<Nz<<std::endl;
    std::cout<<"dz: "<<dz<<std::endl;
    std::cout<<"tlim: "<<tlim<<std::endl;
    std::cout<<"Nt: "<<Nt<<std::endl;
    std::cout<<"dt: "<<dt<<std::endl;

    arma::vec r = arma::linspace(rmin,rmax,Nr);
    arma::vec z = arma::linspace(zmin,zmax,Nz);
    arma::mat V(Nr,Nz,arma::fill::zeros);
    arma::cx_mat Psi(Nr,Nz,arma::fill::zeros);
    arma::cx_mat PsiOld(Nr,Nz,arma::fill::zeros);
    arma::cx_mat PsiR(Nr,Nz,arma::fill::zeros);
    arma::cx_mat PsiR2(Nr,Nz,arma::fill::zeros);
    arma::cx_mat PsiZ(Nr,Nz,arma::fill::zeros);
    arma::dmat MaskZ(Nr,Nz,arma::fill::zeros);
    arma::dmat MaskR(Nr,Nz,arma::fill::zeros);
    arma::dmat R(Nr,Nz,arma::fill::zeros);
    //arma::cx_mat Hr(Nr,3,arma::fill::zeros);
    //arma::cx_mat Hz(Nz,3,arma::fill::zeros);

    r = r+dr/2.0;
    for(int i = 0; i<Nr;i++){
        R.row(i) = r(i)*arma::ones<arma::rowvec>(Nz);
    }
    R.save("R.dat",arma::raw_ascii);
    //r.save("r.dat",arma::raw_ascii);
    //z.save("z.dat",arma::raw_ascii);


    CoulombPotential(V,r,z);
    Gaussian(Psi,r,z,0.0,0.0,1.0);
    std::complex<double> Norm = 2*M_PI*arma::as_scalar(arma::sum(arma::sum(R%arma::conj(Psi)%Psi*dr,0)*dz,1));
    std::complex<double> rExpected;
    std::cout<< Norm <<std::endl;
    Psi = Psi/sqrt(Norm);
    std::cout<< 2*M_PI*arma::as_scalar(arma::sum(arma::sum(R%arma::conj(Psi)%Psi*dr,0)*dz,1))<<std::endl;

    V.save("Coulomb.dat",arma::raw_ascii);
    arma::mat Psi2  = arma::conv_to<arma::dmat>::from(arma::conj(Psi)%Psi);
    Psi2.save("PsiProb.dat",arma::raw_ascii);

    PsiOld = Psi;

    std::cout<<"Mask\n";
    maskZ(MaskZ,r,z,12.0,1.0);
    std::cout<<"MaskZ\n";
    maskR(MaskR,r,z,rmax*0.1,1.0);
    std::cout<<"MaskR\n";
    MaskZ.save("MaskZ.dat",arma::raw_ascii);
    MaskR.save("MaskR.dat",arma::raw_ascii);
    std::cout<<Energy(Psi,V,R,r,z)<<std::endl;
    for(int i=0;i<Nt;i++){
        StepR(PsiOld,PsiR,V,r,dr,Nr,z,dz,Nz,0.0,std::complex<double>(0.0,-1.0)*dt/2.0);
        StepZ(PsiR,PsiZ,V,r,dr,Nr,z,dz,Nz,0.0,std::complex<double>(0.0,-1.0)*dt);
        StepR(PsiZ,PsiR2,V,r,dr,Nr,z,dz,Nz,0.0,std::complex<double>(0.0,-1.0)*dt/2.0);
        PsiR2 = PsiR2%MaskZ%MaskR;
        Norm = 2*M_PI*arma::as_scalar(arma::sum(arma::sum(R%arma::conj(PsiR2)%PsiR2*dr,0)*dz,1));
        PsiOld = PsiR2/sqrt(Norm);
        std::cout<<i<<": ";
        std::cout<<Energy(PsiOld,V,R,r,z)<<" "<<Norm<<std::endl;
    }
    Psi2  = arma::conv_to<arma::dmat>::from(arma::conj(PsiOld)%PsiOld);
    Psi2.save("PsiGround2_120_120.dat",arma::raw_ascii);
    PsiOld.save("PsiGround_120_120.dat",arma::raw_ascii);
    //Hr.save("Hr.dat",arma::raw_ascii);
    //Hz.save("Hz.dat",arma::raw_ascii);
    return 0;
}
